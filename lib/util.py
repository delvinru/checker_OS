# Telegram stuff
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    KeyboardButton,
    ReplyKeyboardMarkup
)

from telegram.ext import (
    ConversationHandler,
    CallbackQueryHandler,
    CallbackContext
)

from lib.dbhelper import DBHelper
from re import findall
from datetime import datetime
from time import time
from loguru import logger
from random import choice


# State definitions for top level conversation
REGISTRATION, LOCATION, CHECK = map(chr, range(3))
# State definitions for registration conversation
SELECTING_FEATURE, TYPING = map(chr, range(6, 8))

# Meta state
STOPPING = map(chr, range(4, 5))
# Shortcut for ConversationHandler.END
END = ConversationHandler.END

# Differents states
(
    MAIN_REG,
    REGISTRATION_USER,
    CHECK_USER,
    START_OVER,
    CURRENT_FEATURE,
) = map(chr, range(10, 15))

# Init class DBhelper for work with db
db = DBHelper()

# Some basic function


def mumble(update: Update, cx: CallbackContext) -> None:
    """If user not choice available options send 'i don't know' message"""

    stickers = [
        'CAACAgIAAxkBAAINAl-9nTmXosBfTTsgxqkLPzuoxWWMAAIoAQACzk6PArBGaMYEVWBEHgQ',
        'CAACAgIAAxkBAAINFF-9nlokjHN1b9ugRAGt6XkcO5t7AAIUAQACzk6PArThej9_OS8VHgQ'
    ]
    sticker = choice(stickers)
    update.message.reply_sticker(sticker)


def send_dev(update: Update, cx: CallbackContext) -> None:
    """If user choose /dev than send message about developer"""

    text = '–ï—Å–ª–∏ –≤—ã –∑–∞–º–µ—Ç–∏–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ —Å–±–æ–∏ –≤ –º–æ–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ, \
    —Ç–æ —Å–æ–æ–±—â–∏—Ç–µ –º–æ–µ–º—É —Å–æ–∑–¥–∞—Ç–µ–ª—é: @delvinru -- –ê–ª–µ–∫—Å–µ–π'
    update.message.reply_text(text=text)


def send_help(update: Update, cx: CallbackContext) -> None:
    update.message.reply_text(
        text='–ò—Å–ø–æ–ª—å–∑—É–π /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–æ—Ç–æ–º')


def stop(update: Update, cx: CallbackContext) -> None:
    update.message.reply_text(text='–•–æ—Ä–æ—à–æ, –ø–æ–∫–∞!')
    return END


def start(update: Update, cx: CallbackContext) -> None:
    """Initialize main window"""

    # Check user was init or not
    if cx.user_data.get(START_OVER):
        text = f'–ü—Ä–∏–≤–µ—Ç, {cx.user_data["name"]}!\n'
        text += '–¢—ã –º–æ–∂–µ—à—å –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –ø–∞—Ä–µ!'
        buttons = [[
            InlineKeyboardButton(
                '–û—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –ø–∞—Ä–µ', 
                callback_data=str(CHECK_USER)
            )
        ]]
        keyboard = InlineKeyboardMarkup(buttons)

        update.callback_query.answer()
        update.callback_query.edit_message_text(
            text=text, reply_markup=keyboard)

        return CHECK
    else:
        user_id = update.message.from_user.id
        user = db.search_user(user_id)

        # If new user was detected
        if user is None:
            keyboard = [
                [InlineKeyboardButton(
                    '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data=str(REGISTRATION_USER))],
            ]
            text = '–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–∞ –ø–∞—Ä–∞—Ö.\n'
            text += "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µüëá\n"
            text += "–í–≤–æ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û. –ï—Å–ª–∏ –≤—ã –æ–ø–µ—á–∞—Ç–∞–ª–∏—Å—å, —Ç–æ –¥–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–∞–≤–∏—Ç—å –¥–æ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'\n"
            text += "‚ùóÔ∏è‚ùóÔ∏è‚ùó\nÔ∏è–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã, –ø–æ—Å–ª–µ –µ—ë –Ω–∞–∂–∞—Ç–∏—è –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–ª—å–∑—è.\n–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é –∏–ª–∏ –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.\n‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è"

            reply_markup = InlineKeyboardMarkup(keyboard)
            update.message.reply_text(
                text,
                reply_markup=reply_markup
            )

            cx.user_data["uid"] = user_id
            return REGISTRATION
        else:
            # user = (id, name)
            text = f'–ü—Ä–∏–≤–µ—Ç, {user[1]}!\n'
            text += '–¢—ã –º–æ–∂–µ—à—å –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –ø–∞—Ä–µ!'
            buttons = [[
                InlineKeyboardButton(
                    '–û—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –ø–∞—Ä–µ', 
                    callback_data=str(CHECK_USER)
                )
            ]]
            keyboard = InlineKeyboardMarkup(buttons)
            update.message.reply_text(text=text, reply_markup=keyboard)

            # Put info in context menu
            cx.user_data['uid'] = user[0]
            cx.user_data['name'] = user[1]

            logger.info(f'User {user[0]} {user[1]} come to me')

            return CHECK

###
# Functions that are required for user registration
###
def reg_select_feature(update: Update, cx: CallbackContext) -> None:
    """Main menu of registration field"""
    buttons = [
        [
            InlineKeyboardButton('–§–ò–û', callback_data='name'),
            InlineKeyboardButton('–ì—Ä—É–ø–ø–∞', callback_data='group')
        ],
        [
            InlineKeyboardButton(
                '–í–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
                callback_data='show_data'),
            InlineKeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', callback_data='done')
        ]
    ]
    keyboard = InlineKeyboardMarkup(buttons)

    text = '–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ.'
    if not cx.user_data.get(START_OVER):
        # First run of this function
        update.callback_query.answer()
        update.callback_query.edit_message_text(
            text=text, reply_markup=keyboard)
    else:
        update.message.reply_text(text=text, reply_markup=keyboard)

    return SELECTING_FEATURE


def show_data(update: Update, cx: CallbackContext) -> None:
    """Show info about user in registration field"""

    cx.user_data[CURRENT_FEATURE] = update.callback_query.data

    text = "*–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å*\n"
    if cx.user_data.get('name'):
        text += f'*–§–ò–û:* {cx.user_data["name"]}\n'
    else:
        text += f'*–§–ò–û:* –ø–æ–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ\n'

    if cx.user_data.get('group'):
        text += f'*–ì—Ä—É–ø–ø–∞:* {cx.user_data["group"]}\n'
    else:
        text += f'*–ì—Ä—É–ø–ø–∞:* –ø–æ–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞\n'

    buttons = [[InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back')]]
    keyboard = InlineKeyboardMarkup(buttons)

    cx.user_data[START_OVER] = False
    update.callback_query.answer()
    update.callback_query.edit_message_text(
        text=text, reply_markup=keyboard, parse_mode='Markdown')

    return MAIN_REG


def ask_for_input(update: Update, cx: CallbackContext) -> None:
    """Prompt for user input"""

    cx.user_data[CURRENT_FEATURE] = update.callback_query.data
    text = '–•–æ—Ä–æ—à–æ, –∂–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—éüôÑ'
    update.callback_query.answer()
    update.callback_query.edit_message_text(text=text)
    return TYPING


def save_input(update: Update, cx: CallbackContext) -> None:
    """Save user state in context"""

    cx.user_data['uid'] = update.message.from_user.id
    cx.user_data['username'] = update.message.from_user.username
    current_option = cx.user_data[CURRENT_FEATURE]
    user_text = update.message.text

    regex_group = r'^\S{4}-\d{2}-\d{2}$'
    regex_name = r'\S{3,} \S{3,} \S{3,}'

    bad_input = False
    if current_option == 'name':
        if len(findall(regex_name, user_text)) > 0:
            cx.user_data['name'] = update.message.text
        else:
            bad_input = True
    elif current_option == 'group':
        if len(findall(regex_group, user_text)) > 0:
            cx.user_data['group'] = update.message.text.upper()
        else:
            bad_input = True

    if bad_input:
        cx.bot.send_message(
            chat_id=update.message.chat.id,
            text='–í—ã –≤–≤–µ–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.ü§î\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')

    cx.user_data[START_OVER] = True
    return reg_select_feature(update, cx)


@logger.catch
def register_user(update: Update, cx: CallbackContext) -> None:
    """Add user to database"""

    # If tried register without name or group show data and start again
    if not cx.user_data.get('name') or not cx.user_data.get('group'):
        logger.error(
            f'User {cx.user_data["uid"]} try register without required field')
        cx.user_data[START_OVER] = True
        return show_data(update, cx)

    if not cx.user_data.get('username'):
        logger.warning(f'User {cx.user_data["name"]} with empty username')
        cx.user_data['username'] = 'None'

    # Create user in database
    db.init_user(
        cx.user_data['uid'],
        cx.user_data['username'],
        cx.user_data['name'],
        cx.user_data['group'])

    logger.info(
        f'User {cx.user_data["uid"]} {cx.user_data["username"]} was registered')

    cx.user_data[START_OVER] = True
    start(update, cx)
    return END


def stop_reg(update: Update, cx: CallbackContext) -> None:
    """End registration"""
    update.message.reply_text('–•–æ—Ä–æ—à–æ, –ø–æ–∫–∞!')
    return END

###
# Functions that are needed to mark the user
###
def stop_check(update: Update, cx: CallbackContext) -> None:
    """End of check"""
    update.message.reply_text('–•–æ—Ä–æ—à–æ, –ø–æ–∫–∞!')
    return END


def check_user(update: Update, cx: CallbackContext) -> None:
    """Check is user exist in database"""

    db.mark_user(cx.user_data['uid'])
    logger.info(
        f'{cx.user_data["uid"]} {cx.user_data["name"]} was marked in DB')
    update.callback_query.edit_message_text(text='–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –Ω–∞ –ø–∞—Ä–µ!‚ò∫Ô∏è')

    return END
